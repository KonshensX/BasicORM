---------------------------------------------NOTES ABOUT THIS SO CALLED LIBRARY -----------------------------------------------------
-ITable Interface :
	- Fields :
		* ID.
		* TableName.
	- Methods :
		* Save(ITable object).
		* IEnumerable<ITable> GetAll().
		* ITable Get(int ID).
		* int Update(ITable object).
		* int Remove(ITable object).

	- Each table has an ID and a name.
	- There should be a class the implements the ITable interface and all the other table gonna inherite directly from the Table Class.


-Methods :
	- Get method
		* Each class has a get method which is inhereted from the Table class.
		* How does the function know which class it should return.
		* I cannot return the interface ITable because it cannot be used as variable (ITable is a type).

	- GetAll method
		* I need an instance of the object im trying to return so i can add it or yield it to an IEnumerable.
		* I need to iterate through the properties of the object im trying to return so that i can fill the values in before yeilding it to the IEnumerable.

-WHAT IT DOES CURRENTLY AND WHAT I WANT IT TO DO:
	- Basic functionalities are working based on several test i ran using different entities.
	- Currently it does not handle foreign keys, which means if i have a Post enitity and a Category entity, it will only get the category_id from the database into a variable, what i actually need is get the Category entity as a whole into the post so i can make changes to it and access it's properties and methods.
	- More exceptions handiling is definetely required because currently i only handled cases where the data is correct and valid.
	- First of all i need to close all connections that were opened during CRUD operations (tryf).
	- Custom exception that im gonna have to handle is when the given ID doesn't correspond to any record in the database.

*----------------------------- WORKING ON THE FOREIGN KEYS 02/03/2017 -----------------------------*
- How am i going to tacle this??
	* First things first the database should be ready for the this which means the foreign key relationship is already made.
	* I need to check if the property is of type ITable. 
	* If the above is true then this must be done:
		* Get the ID from the the database.
		* Call the get method in order to get the corresponding item.

	* WHAT I CHANGED :
		* The table name method was updated to handle the entities that ends with 'Y'. For example 'Category' => 'Categories'.
		* In that case i need to delete the 'y' char and repalce with an 'ies'.